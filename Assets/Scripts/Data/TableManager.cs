// <auto-generated>
//  automatically generated by table tool, do not modify
// </auto-generated>
using Framework;
using System;
using System.Collections.Generic;

namespace Chanto
{
	public class TableManager : Singleton<TableManager>
    {
        private Dictionary<string, byte[]> dataTableAssets = new Dictionary<string, byte[]>(100);
        public Dictionary<string, byte[]> DataTableAssets { get { return dataTableAssets; } }

        private Dictionary<string, BaseTable> dataTables = new Dictionary<string, BaseTable>(100);

        private Dictionary<Type, string> nameCache = new Dictionary<Type, string>(200);

        private bool[] default_bool = new bool[0];
        private short[] default_short = new short[0];
        private int[] default_int = new int[0];
        private float[] default_float = new float[0];
        private string[] default_string = new string[0];

        #region Data Method

        public bool GetBool(string tableName, string id, string column, bool defaultValue = false)
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return defaultValue;

            return dataTable.GetBoolValue(id, column, defaultValue);
        }

        public bool[] GetBoolArray(string tableName, string id, string column)
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return default_bool;

            var result = dataTable.GetBoolArray(id, column);
            if (null == result)
                return default_bool;

            return result;
        }
        
        public short GetShort(string tableName, string id, string column, short defaultValue = 0)
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return defaultValue;

            return dataTable.GetShortValue(id, column, defaultValue);
        }

        public short[] GetShortArray(string tableName, string id, string column)
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return default_short;

            var result = dataTable.GetShortArray(id, column);
            if (null == result)
                return default_short;

            return result;
        }
        
        //[Obsolete("This function is not recommended, you can call GetDataRow<T>")]
        public int GetInt(string tableName, string id, string column, int defaultValue = 0)
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return defaultValue;

            return dataTable.GetIntValue(id, column, defaultValue);
        }

        //[Obsolete("This function is not recommended, you can call GetDataRow<T>")]
        public int[] GetIntArray(string tableName, string id, string column) 
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return default_int;

            var result = dataTable.GetIntArray(id, column);
            if (null == result)
                return default_int;

            return result;
        }

        //[Obsolete("This function is not recommended, you can call GetDataRow<T>")]
        public float GetFloat(string tableName, string id, string column, float defaultValue = 0.0f) 
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return defaultValue;

            return dataTable.GetFloatValue(id, column, defaultValue);
        }

        //[Obsolete("This function is not recommended, you can call GetDataRow<T>")]
        public float[] GetFloatArray(string tableName, string id, string column) 
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return default_float;

            var result = dataTable.GetFloatArray(id, column);
            if (null == result)
                return default_float;

            return result;
        }

        //[Obsolete("This function is not recommended, you can call GetDataRow<T>")]
        public string GetString(string tableName, string id, string column, string defaultValue = "") 
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return defaultValue;

            return dataTable.GetStringValue(id, column, defaultValue);
        }

        //[Obsolete("This function is not recommended, you can call GetDataRow<T>")]
        public int GetStringArrayLength(string tableName, string id, string column) 
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return 0;

            return dataTable.GetStringArrayLength(id, column);
        }
        
        //[Obsolete("This function is not recommended, you can call GetDataRow<T>")]
        public string[] GetStringArray(string tableName, string id, string column) 
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return default_string;

            var result = dataTable.GetStringArray(id, column);
            if (null == result)
                return default_string;

            return result;
        }

        //[Obsolete("This function is not recommended, you can call GetDataRow<T>")]
        public string GetStringArrayItem(string tableName, string id, string column, int index, string defaultValue = "") 
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return defaultValue;

            return dataTable.GetStringArrayItem(id, column, index, defaultValue);
        }

        //[Obsolete("This function is not recommended, you can call GetDataRow<T>")]
        public int GetInt(string tableName, int id, string column, int defaultValue = 0)
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return defaultValue;

            return dataTable.GetIntValue(id, column, defaultValue);
        }

        //[Obsolete("This function is not recommended, you can call GetDataRow<T>")]
        public int[] GetIntArray(string tableName, int id, string column)
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return default_int;

            var result = dataTable.GetIntArray(id, column);
            if (null == result)
                return default_int;

            return result;
        }

        //[Obsolete("This function is not recommended, you can call GetDataRow<T>")]
        public float GetFloat(string tableName, int id, string column, float defaultValue = 0.0f)
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return defaultValue;

            return dataTable.GetFloatValue(id, column, defaultValue);
        }

        //[Obsolete("This function is not recommended, you can call GetDataRow<T>")]
        public float[] GetFloatArray(string tableName, int id, string column)
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return default_float;

            var result = dataTable.GetFloatArray(id, column);
            if (null == result)
                return default_float;

            return result;
        }

        //[Obsolete("This function is not recommended, you can call GetDataRow<T>")]
        public string GetString(string tableName, int id, string column, string defaultValue = "")
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return defaultValue;

            return dataTable.GetStringValue(id, column, defaultValue);
        }

        //[Obsolete("This function is not recommended, you can call GetDataRow<T>")]
        public int GetStringArrayLength(string tableName, int id, string column)
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return 0;

            return dataTable.GetStringArrayLength(id, column);
        }

        //[Obsolete("This function is not recommended, you can call GetDataRow<T>")]
        public string[] GetStringArray(string tableName, int id, string column)
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return default_string;

            var result = dataTable.GetStringArray(id, column);
            if (null == result)
                return default_string;

            return result;
        }
        
        //[Obsolete("This function is not recommended, you can call GetDataRow<T>")]
        public string GetStringArrayItem(string tableName, int id, string column, int index, string defaultValue = "")
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return defaultValue;

            return dataTable.GetStringArrayItem(id, column, index, defaultValue);
        }

        //[Obsolete("This function is not recommended, you can call GetDataRow<T>")]
        public Dictionary<int, int> GetDictionaryII(string tableName, int id, string column)
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return null;

            return dataTable.GetDictionaryII(id, column);
        }

        //[Obsolete("This function is not recommended, you can call GetDataRow<T>")]
        public Dictionary<int, string> GetDictionaryIS(string tableName, int id, string column)
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return null;

            return dataTable.GetDictionaryIS(id, column);
        }

        //[Obsolete("This function is not recommended, you can call GetDataRow<T>")]
        public Dictionary<string, int> GetDictionarySI(string tableName, int id, string column)
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return null;

            return dataTable.GetDictionarySI(id, column);
        }

        //[Obsolete("This function is not recommended, you can call GetDataRow<T>")]
        public Dictionary<string, string> GetDictionarySS(string tableName, int id, string column)
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return null;

            return dataTable.GetDictionarySS(id, column);
        }
        
        #endregion Data Method
        
        #region Table Method

        /// <summary>
        /// 获得表
        /// </summary>
        /// <typeparam name="T">继承自BaseTable的表类型</typeparam>
        /// <returns>表对象</returns>
        public T GetTable<T>() where T : BaseTable, new()
        {
            Type type = typeof(T);
            
            string tableName;
            if (!nameCache.TryGetValue(type, out tableName))
            {
                string typeName = type.Name;
                int index = typeName.LastIndexOf("Table");
                if (index <= 0)
                {
                    Log.Error("The T must inherit from BaseTable");
                    return null;
                }

                tableName = typeName.Substring(0, index);

                if (!this.IsValidTable(tableName))
                    tableName = this.LowerFirstChar(tableName);

                if (!this.IsValidTable(tableName))
                {
                    Log.ErrorFormat("Can not find {0}, please check.", typeName);
                    return null;
                }

                if (!nameCache.ContainsKey(type))
                    nameCache.Add(type, tableName);
            }
            
            if (!this.dataTables.ContainsKey(tableName))
                this.dataTables.Add(tableName, new T());

            return (T)this.dataTables[tableName];
        }
        
        /// <summary>
        /// 按行遍历表格
        /// </summary>
        /// <param name="tableName"></param>
        /// <param name="callback"></param>
        public void dumpTable(string tableName, System.Func<BaseDataRow, bool> callback)
        {
            var table = this.GetTable(tableName);
            if (null == table)
                return;

            table.VisitTable(callback);
        }
        
        /// <summary>
        /// 获得表数据的条数
        /// </summary>
        /// <param name="tableName">数据表名</param>
        /// <returns></returns>
        public int GetDataCount(string tableName)
        {
            BaseTable dataTable = this.GetTable(tableName);
            if (null == dataTable)
                return 0;

            return dataTable.GetDataCount();
        }
        
        #endregion Table Method

        #region DataRow Method

        /// <summary>
        /// 判断表的数据行是否存在
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool HasDataRow<T>(int id) where T : BaseDataRow
        {
            Type type = typeof(T);
            
            string tableName;
            if(!nameCache.TryGetValue(type, out tableName))
            {
                string typeName = type.Name;
                int index = typeName.LastIndexOf("DataRow");
                if (index <= 0)
                {
                    Log.Error("The T must inherit from BaseDataRow");
                    return false;
                }

                tableName = typeName.Substring(0, index);

                if (!this.IsValidTable(tableName))
                    tableName = this.LowerFirstChar(tableName);

                if (!this.IsValidTable(tableName))
                {
                    Log.ErrorFormat("Can not find {0}, please check.", typeName);
                    return false;
                }
                
                if(!nameCache.ContainsKey(type))
                    nameCache.Add(type, tableName);
            }

            BaseTable table = this.GetTable(tableName);
            if (null != table)
                return table.HasDataRow(id);

            return false;
        }

        /// <summary>
        /// 判断表的数据行是否存在
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool HasDataRow<T>(string id) where T : BaseDataRow
        {
            Type type = typeof(T);
            
            string tableName;
            if(!nameCache.TryGetValue(type, out tableName))
            {
                string typeName = type.Name;

                int index = typeName.LastIndexOf("DataRow");
                if (index <= 0)
                {
                    Log.Error("The T must inherit from BaseDataRow");
                    return false;
                }

                tableName = typeName.Substring(0, index);

                if (!this.IsValidTable(tableName))
                    tableName = this.LowerFirstChar(tableName);

                if (!this.IsValidTable(tableName))
                {
                    Log.ErrorFormat("Can not find {0}, please check.", typeName);
                    return false;
                }
                
                if(!nameCache.ContainsKey(type))
                    nameCache.Add(type, tableName);
            }
            
            BaseTable table = this.GetTable(tableName);
            if (null != table)
                return table.HasDataRow(id);

            return false;
        }
        
        /// <summary>
        /// 获得表的数据行
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="id"></param>
        /// <returns></returns>
        public T GetDataRow<T>(int id) where T : BaseDataRow
        {
            Type type = typeof(T);
            
            string tableName;
            if(!nameCache.TryGetValue(type, out tableName))
            {
                string typeName = type.Name;
                int index = typeName.LastIndexOf("DataRow");
                if (index <= 0)
                {
                    Log.Error("The T must inherit from BaseDataRow");
                    return null;
                }

                tableName = typeName.Substring(0, index);

                if (!this.IsValidTable(tableName))
                    tableName = this.LowerFirstChar(tableName);

                if (!this.IsValidTable(tableName))
                {
                    Log.ErrorFormat("Can not find {0}, please check.", typeName);
                    return null;
                }
                
                if(!nameCache.ContainsKey(type))
                    nameCache.Add(type, tableName);
            }
            
            BaseTable table = this.GetTable(tableName);
            if (null != table)
                return (T)table.GetTableRow(id);

            return null;
        }

        /// <summary>
        /// 获得表的数据行
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="id"></param>
        /// <returns></returns>
        public T GetDataRow<T>(string id) where T : BaseDataRow
        {
            Type type = typeof(T);
            
            string tableName;
            if(!nameCache.TryGetValue(type, out tableName))
            {
                string typeName = typeof(T).Name;
                int index = typeName.LastIndexOf("DataRow");
                if (index <= 0)
                {
                    Log.Error("The T must inherit from BaseDataRow");
                    return null;
                }

                tableName = typeName.Substring(0, index);

                if (!this.IsValidTable(tableName))
                    tableName = this.LowerFirstChar(tableName);

                if (!this.IsValidTable(tableName))
                {
                    Log.ErrorFormat("Can not find {0}, please check.", typeName);
                    return null;
                }
                
                if(!nameCache.ContainsKey(type))
                    nameCache.Add(type, tableName);
            }
            
            BaseTable table = this.GetTable(tableName);
            if (null != table)
                return (T)table.GetTableRow(id);

            return null;
        }

        /// <summary>
        /// 根据行号获得表的数据行
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="index">行号,从0开始</param>
        /// <returns></returns>
        public T GetDataRowByIndex<T>(int index) where T : BaseDataRow
        {
            Type type = typeof(T);

            string tableName;
            if (!nameCache.TryGetValue(type, out tableName))
            {
                string typeName = typeof(T).Name;
                int tmpIndex = typeName.LastIndexOf("DataRow");
                if (tmpIndex <= 0)
                {
                    Log.Error("The T must inherit from BaseDataRow");
                    return null;
                }

                tableName = typeName.Substring(0, tmpIndex);

                if (!this.IsValidTable(tableName))
                    tableName = this.LowerFirstChar(tableName);

                if (!this.IsValidTable(tableName))
                {
                    Log.ErrorFormat("Can not find {0}, please check.", typeName);
                    return null;
                }

                if (!nameCache.ContainsKey(type))
                    nameCache.Add(type, tableName);
            }

            BaseTable table = this.GetTable(tableName);
            if (null != table)
                return (T)table.GetTableRowByIndex(index);

            return null;
        }

        /// <summary>
        /// 根据Id获得数据行(Lua侧获取行数据建议使用此接口)
        /// </summary>
        /// <param name="tableName"></param>
        /// <param name="id"></param>
        public BaseDataRow GetDataRowById(string tableName, int id)
        {
            var table = this.GetTable(tableName);
            if (null == table)
                return null;

            return table.GetTableRow(id);
        }

        /// <summary>
        /// 根据Id获得数据行(Lua侧获取行数据建议使用此接口)
        /// </summary>
        /// <param name="tableName"></param>
        /// <param name="id"></param>
        public BaseDataRow GetDataRowById(string tableName, string id)
        {
            var table = this.GetTable(tableName);
            if (null == table)
                return null;

            return table.GetTableRow(id);
        }

        /// <summary>
        /// 根据行号获得数据行(Lua侧获取行数据建议使用此接口)
        /// </summary>
        /// <param name="tableName"></param>
        /// <param name="index"></param>
        public BaseDataRow GetDataRowByIndex(string tableName, int index)
        {
            var table = this.GetTable(tableName);
            if (null == table)
                return null;

            return table.GetTableRowByIndex(index);
        }

        #endregion DataRow Method

        #region Framework Method
        
        /// <summary>
        /// 重置所有表
        /// </summary>
        public void ResetAllTable()
        {
            foreach(var table in this.dataTables)
            {
                if (null != table.Value)
                    table.Value.ResetTable();
            }
        }
        
        /// <summary>
        /// 根据表名获得表对象
        /// </summary>
        /// <param name="tableName">表名</param>
        /// <returns>表对象</returns>
        private BaseTable GetTable(string tableName)
        {
            BaseTable table = null;
            if (this.dataTables.TryGetValue(tableName, out table) && null != table)
                return table;
            
            if (!this.IsValidTable(tableName))
            {
                Log.ErrorFormat("Can not find the table {0}", tableName);
                return null;
            }
            
            if (!this.dataTables.ContainsKey(tableName))
            {
                string tableType = string.Format("LS.{0}Table", this.UpperFirstChar(tableName));
                table = (BaseTable)Activator.CreateInstance(Type.GetType(tableType));

                this.dataTables.Add(tableName, table);
            }
            
            return this.dataTables[tableName];
        }

        /// <summary>
        /// 将字符串的首字母大写
        /// </summary>
        /// <param name="input">输入字符串</param>
        /// <returns></returns>
        private string UpperFirstChar(string input)
        {
            if (string.IsNullOrEmpty(input))
                return string.Empty;

            if (input.Length <= 1)
                return input.ToUpperInvariant();
            else
                return input.Substring(0, 1).ToUpperInvariant() + input.Substring(1);
        }

        /// <summary>
        /// 将字符串的首字母大写
        /// </summary>
        /// <param name="input">输入字符串</param>
        /// <returns></returns>
        private string LowerFirstChar(string input)
        {
            if (string.IsNullOrEmpty(input))
                return string.Empty;

            if (input.Length <= 1)
                return input.ToUpperInvariant();
            else
                return input.Substring(0, 1).ToLowerInvariant() + input.Substring(1);
        }

        /// <summary>
        /// 判断表名是否合法
        /// </summary>
        /// <param name="tableName">表名</param>
        /// <returns>true-合法, false-不合法</returns>
        public bool IsValidTable(string tableName)
        {
            bool isValid = false;

            switch (tableName)
            {
                case "ab": { isValid = true; break; }
                case "ability": { isValid = true; break; }
                case "achievement": { isValid = true; break; }
                case "activity_mobilize_rank": { isValid = true; break; }
                case "activity_panel": { isValid = true; break; }
                case "activity_show": { isValid = true; break; }
                case "activityRecommend": { isValid = true; break; }
                case "affairs": { isValid = true; break; }
                case "alliance_cropland": { isValid = true; break; }
                case "alliance_event": { isValid = true; break; }
                case "alliance_gift_group": { isValid = true; break; }
                case "alliance_government_post": { isValid = true; break; }
                case "alliance_info": { isValid = true; break; }
                case "alliance_item_warehouse": { isValid = true; break; }
                case "alliancescience": { isValid = true; break; }
                case "alliancescience2": { isValid = true; break; }
                case "allianceshop": { isValid = true; break; }
                case "animation_config": { isValid = true; break; }
                case "answer_activity": { isValid = true; break; }
                case "arms": { isValid = true; break; }
                case "arms_new": { isValid = true; break; }
                case "armsdialog": { isValid = true; break; }
                case "armyscore_point": { isValid = true; break; }
                case "armyscore_point_level": { isValid = true; break; }
                case "armyscore_skill": { isValid = true; break; }
                case "armyscore_type": { isValid = true; break; }
                case "attack_effect": { isValid = true; break; }
                case "base_arms_effect": { isValid = true; break; }
                case "base_building_tab": { isValid = true; break; }
                case "base_goods": { isValid = true; break; }
                case "base_skill": { isValid = true; break; }
                case "base_talent": { isValid = true; break; }
                case "base_talentpoint": { isValid = true; break; }
                case "base_talenttype": { isValid = true; break; }
                case "base_unlock": { isValid = true; break; }
                case "base_world": { isValid = true; break; }
                case "battle": { isValid = true; break; }
                case "battle_animation": { isValid = true; break; }
                case "battle_field": { isValid = true; break; }
                case "battle_field_element": { isValid = true; break; }
                case "battle_field_rank": { isValid = true; break; }
                case "biochemical_beauty": { isValid = true; break; }
                case "biochemical_beauty_intimacy": { isValid = true; break; }
                case "biochemical_beauty_story": { isValid = true; break; }
                case "biochemical_beauty_treatment": { isValid = true; break; }
                case "biochemical_science": { isValid = true; break; }
                case "biochemical_science_gene": { isValid = true; break; }
                case "block_unlock": { isValid = true; break; }
                case "block_unlock_3": { isValid = true; break; }
                case "block_unlock_4": { isValid = true; break; }
                case "block_unlock_5": { isValid = true; break; }
                case "block_unlock_roenewguide": { isValid = true; break; }
                case "btn_on": { isValid = true; break; }
                case "bubble_config": { isValid = true; break; }
                case "building": { isValid = true; break; }
                case "building_c": { isValid = true; break; }
                case "building_decoration": { isValid = true; break; }
                case "building_e": { isValid = true; break; }
                case "building_element": { isValid = true; break; }
                case "building_f": { isValid = true; break; }
                case "building_td2": { isValid = true; break; }
                case "building_world": { isValid = true; break; }
                case "career_effect": { isValid = true; break; }
                case "cargo_battle_Fool": { isValid = true; break; }
                case "cargo_battle_Operation": { isValid = true; break; }
                case "cargo_battle_people": { isValid = true; break; }
                case "changeLanguage": { isValid = true; break; }
                case "ChangingSceneTips": { isValid = true; break; }
                case "chapter_1": { isValid = true; break; }
                case "chapter_1_c_chapter_1": { isValid = true; break; }
                case "chapter_1_c_chapter_2": { isValid = true; break; }
                case "chapter_1_c_versiontype": { isValid = true; break; }
                case "chapter_1_e": { isValid = true; break; }
                case "chapter_1_f": { isValid = true; break; }
                case "chapter_1_g": { isValid = true; break; }
                case "chapter_6": { isValid = true; break; }
                case "chapter_roenewguide": { isValid = true; break; }
                case "chapter_TD": { isValid = true; break; }
                case "chapter_TD_guide": { isValid = true; break; }
                case "character": { isValid = true; break; }
                case "checkin_exchange": { isValid = true; break; }
                case "checkpoint": { isValid = true; break; }
                case "city_map_templates_19_5": { isValid = true; break; }
                case "city_map_templates_19_6": { isValid = true; break; }
                case "CityBuildingIntensify_Common": { isValid = true; break; }
                case "CityBuildingIntensify_Condition": { isValid = true; break; }
                case "CityBuildingIntensify_Event": { isValid = true; break; }
                case "CityBuildingIntensify_Show": { isValid = true; break; }
                case "clash_medal": { isValid = true; break; }
                case "collect": { isValid = true; break; }
                case "core_reward": { isValid = true; break; }
                case "country_info": { isValid = true; break; }
                case "cpro_building": { isValid = true; break; }
                case "cpro_mission": { isValid = true; break; }
                case "cpro_mission_group": { isValid = true; break; }
                case "cpro_office_cardcombine": { isValid = true; break; }
                case "cpro_profession": { isValid = true; break; }
                case "cpro_role": { isValid = true; break; }
                case "cpro_section": { isValid = true; break; }
                case "cpro_talent_card": { isValid = true; break; }
                case "crossscore": { isValid = true; break; }
                case "daily_quest": { isValid = true; break; }
                case "data_base_sere": { isValid = true; break; }
                case "DD_season_group": { isValid = true; break; }
                case "DD_seasonMap": { isValid = true; break; }
                case "DD_Talent": { isValid = true; break; }
                case "DD_Talent_Connect": { isValid = true; break; }
                case "DD_wartile_position": { isValid = true; break; }
                case "DD_wartile_show": { isValid = true; break; }
                case "DD_worldcity": { isValid = true; break; }
                case "DD_worldcity_position": { isValid = true; break; }
                case "DD_zone": { isValid = true; break; }
                case "debuff": { isValid = true; break; }
                case "decompose": { isValid = true; break; }
                case "decoration": { isValid = true; break; }
                case "decoration_collect": { isValid = true; break; }
                case "decoration_shop": { isValid = true; break; }
                case "DesertEventBuilding": { isValid = true; break; }
                case "DesertGoldmineWar_goldmine": { isValid = true; break; }
                case "DesertGoldmineWar_goldmine_refresh101": { isValid = true; break; }
                case "DesertGoldmineWar_goldmine_refresh102": { isValid = true; break; }
                case "DesertGoldmineWar_goldmine_refresh103": { isValid = true; break; }
                case "DesertGoldmineWar_goldmine_refresh104": { isValid = true; break; }
                case "DesertGoldmineWar_goldmine_refresh105": { isValid = true; break; }
                case "DesertGoldmineWar_goldmine_refresh106": { isValid = true; break; }
                case "DesertGoldmineWar_goldmine_refresh2": { isValid = true; break; }
                case "DesertGoldmineWar_goldrush_building": { isValid = true; break; }
                case "DesertGoldmineWar_goldrush_config": { isValid = true; break; }
                case "desertSkill": { isValid = true; break; }
                case "DesertTalent_DesertTalent": { isValid = true; break; }
                case "DesertTalent_Shading": { isValid = true; break; }
                case "DesertTalentStats": { isValid = true; break; }
                case "details": { isValid = true; break; }
                case "diary": { isValid = true; break; }
                case "dig_building": { isValid = true; break; }
                case "dig_food_supply": { isValid = true; break; }
                case "dig_goods": { isValid = true; break; }
                case "dig_heroes": { isValid = true; break; }
                case "dig_ignorefiles": { isValid = true; break; }
                case "dig_information_tips": { isValid = true; break; }
                case "dig_model_animation": { isValid = true; break; }
                case "dig_model_animation_dig_model_animation": { isValid = true; break; }
                case "dig_model_animation_dig_model_animation_test": { isValid = true; break; }
                case "dig_res_type": { isValid = true; break; }
                case "dig_truck": { isValid = true; break; }
                case "dig_underground_soil": { isValid = true; break; }
                case "discovery": { isValid = true; break; }
                case "doomsday_info": { isValid = true; break; }
                case "doomsday_task": { isValid = true; break; }
                case "doomsdaynote": { isValid = true; break; }
                case "doomsdaynote_doomsdaynote": { isValid = true; break; }
                case "doomsdaynote_sheet001": { isValid = true; break; }
                case "effect": { isValid = true; break; }
                case "effect_stats": { isValid = true; break; }
                case "endowment": { isValid = true; break; }
                case "engines": { isValid = true; break; }
                case "equip_info_equip": { isValid = true; break; }
                case "equip_info_equip_random_effect": { isValid = true; break; }
                case "equip_info_equipClassification": { isValid = true; break; }
                case "equip_info_equipMake": { isValid = true; break; }
                case "equip_info_new_equip": { isValid = true; break; }
                case "equip_info_new_equipMake": { isValid = true; break; }
                case "equip_info_new_material_slot": { isValid = true; break; }
                case "equip_info_new_suit": { isValid = true; break; }
                case "equip_info_new_suit_equip": { isValid = true; break; }
                case "equip_info_new_suit_equip_effect": { isValid = true; break; }
                case "equip_info_suit": { isValid = true; break; }
                case "equip_info_suit_equip": { isValid = true; break; }
                case "equip_info_suit_equip_effect": { isValid = true; break; }
                case "event_show": { isValid = true; break; }
                case "eventBuilding": { isValid = true; break; }
                case "exchange_page": { isValid = true; break; }
                case "exchangecycle": { isValid = true; break; }
                case "exchangeshop": { isValid = true; break; }
                case "explain": { isValid = true; break; }
                case "exploration_event": { isValid = true; break; }
                case "explore": { isValid = true; break; }
                case "facility": { isValid = true; break; }
                case "field_monster": { isValid = true; break; }
                case "figure": { isValid = true; break; }
                case "five_star": { isValid = true; break; }
                case "fog_inner_city_map": { isValid = true; break; }
                case "fog_inner_city_map_b_u3d": { isValid = true; break; }
                case "fortress": { isValid = true; break; }
                case "ga_event": { isValid = true; break; }
                case "general": { isValid = true; break; }
                case "general_store": { isValid = true; break; }
                case "item": { isValid = true; break; }
                case "get_item": { isValid = true; break; }
                case "getmore_power": { isValid = true; break; }
                case "gift": { isValid = true; break; }
                case "GiftUIShow": { isValid = true; break; }
                case "goods": { isValid = true; break; }
                case "grade": { isValid = true; break; }
                case "great_fotress": { isValid = true; break; }
                case "great_office": { isValid = true; break; }
                case "greeting_card": { isValid = true; break; }
                case "growth_event": { isValid = true; break; }
                case "guide": { isValid = true; break; }
                case "guide_2022": { isValid = true; break; }
                case "guide_2022_b_questui": { isValid = true; break; }
                case "guide_2022_c": { isValid = true; break; }
                case "guide_battle_Operation": { isValid = true; break; }
                case "guide_battle_people": { isValid = true; break; }
                case "guide_step_ContentInfo": { isValid = true; break; }
                case "guide_step_GuideStep": { isValid = true; break; }
                case "help_link": { isValid = true; break; }
                case "hero": { isValid = true; break; }
                case "hero_advance": { isValid = true; break; }
                case "hero_decoration": { isValid = true; break; }
                case "hero_defense_building": { isValid = true; break; }
                case "hero_defense_hero": { isValid = true; break; }
                case "hero_defense_stage": { isValid = true; break; }
                case "hero_equipments": { isValid = true; break; }
                case "hero_equipments_suit": { isValid = true; break; }
                case "hero_info": { isValid = true; break; }
                case "hero_information": { isValid = true; break; }
                case "hero_refine": { isValid = true; break; }
                case "hero_sk": { isValid = true; break; }
                case "hero_skill": { isValid = true; break; }
                case "hero_special_equipments": { isValid = true; break; }
                case "hero_tags": { isValid = true; break; }
                case "heroactivity_next_show_info": { isValid = true; break; }
                case "house": { isValid = true; break; }
                case "howtoPlay": { isValid = true; break; }
                case "identity": { isValid = true; break; }
                case "initData": { isValid = true; break; }
                case "inner_city_map_u3d": { isValid = true; break; }
                case "invitation_task_01": { isValid = true; break; }
                case "invitation_task_02": { isValid = true; break; }
                case "language": { isValid = true; break; }
                case "language_channel": { isValid = true; break; }
                case "loading_config": { isValid = true; break; }
                case "loading_config_loading_config": { isValid = true; break; }
                case "loading_config_loading_group": { isValid = true; break; }
                case "loadingTips": { isValid = true; break; }
                case "localXMLSwitch": { isValid = true; break; }
                case "loe_alliance_building": { isValid = true; break; }
                case "loe_resourcepoint": { isValid = true; break; }
                case "loe_territory_effect": { isValid = true; break; }
                case "loe_territory_effect_type_2": { isValid = true; break; }
                case "loe_worldbuilding": { isValid = true; break; }
                case "lordDetails": { isValid = true; break; }
                case "lottery_info": { isValid = true; break; }
                case "LS_announcement": { isValid = true; break; }
                case "lueagearea": { isValid = true; break; }
                case "Mail_ChannelID": { isValid = true; break; }
                case "mail_legend": { isValid = true; break; }
                case "maintips": { isValid = true; break; }
                case "map_event": { isValid = true; break; }
                case "map_unity_sprits": { isValid = true; break; }
                case "material_stage": { isValid = true; break; }
                case "material_station": { isValid = true; break; }
                case "medal": { isValid = true; break; }
                case "merge_shop": { isValid = true; break; }
                case "missile": { isValid = true; break; }
                case "monster": { isValid = true; break; }
                case "monster_model": { isValid = true; break; }
                case "monsters_status": { isValid = true; break; }
                case "monsters_wave": { isValid = true; break; }
                case "monsters_wave_u3d": { isValid = true; break; }
                case "multiple_activity_around": { isValid = true; break; }
                case "new_army_relation": { isValid = true; break; }
                case "new_faction": { isValid = true; break; }
                case "new_hero_group": { isValid = true; break; }
                case "new_hero_relations": { isValid = true; break; }
                case "new_hero_skills": { isValid = true; break; }
                case "new_heroes": { isValid = true; break; }
                case "new_player_guide_item_use_guide": { isValid = true; break; }
                case "new_player_guide_new_player_guide_content": { isValid = true; break; }
                case "new_player_guide_new_player_guide_settings": { isValid = true; break; }
                case "newLocalheroSkill_ab": { isValid = true; break; }
                case "newLocalheroSkill_sk": { isValid = true; break; }
                case "newlordDetails": { isValid = true; break; }
                case "Notice": { isValid = true; break; }
                case "novice_first_recharge_novice_heap": { isValid = true; break; }
                case "novice_first_recharge_novice_recharge": { isValid = true; break; }
                case "novice_panel": { isValid = true; break; }
                case "numerical_shooting_buff": { isValid = true; break; }
                case "numerical_shooting_Bullet": { isValid = true; break; }
                case "numerical_shooting_difficulty": { isValid = true; break; }
                case "numerical_shooting_item": { isValid = true; break; }
                case "numerical_shooting_monster": { isValid = true; break; }
                case "numerical_shooting_monster_group": { isValid = true; break; }
                case "numerical_shooting_operator_group": { isValid = true; break; }
                case "numerical_shooting_result": { isValid = true; break; }
                case "numerical_shooting_roadblock": { isValid = true; break; }
                case "numerical_shooting_scene": { isValid = true; break; }
                case "numerical_shooting_Setting": { isValid = true; break; }
                case "numerical_shooting_soldier": { isValid = true; break; }
                case "numerical_shooting_stage": { isValid = true; break; }
                case "office": { isValid = true; break; }
                case "office_great_office": { isValid = true; break; }
                case "office_office": { isValid = true; break; }
                case "one_year": { isValid = true; break; }
                case "other_building": { isValid = true; break; }
                case "pack_filtrate": { isValid = true; break; }
                case "pandectDetails": { isValid = true; break; }
                case "player_career": { isValid = true; break; }
                case "plot": { isValid = true; break; }
                case "popup": { isValid = true; break; }
                case "position": { isValid = true; break; }
                case "position_unlock": { isValid = true; break; }
                case "power": { isValid = true; break; }
                case "president_policy": { isValid = true; break; }
                case "president_right_show": { isValid = true; break; }
                case "property": { isValid = true; break; }
                case "quest": { isValid = true; break; }
                case "puzzle_quest": { isValid = true; break; }
                case "q_guide": { isValid = true; break; }
                case "q_plot": { isValid = true; break; }
                case "quest_notice": { isValid = true; break; }
                case "queue_unlock": { isValid = true; break; }
                case "quick_clear_cd": { isValid = true; break; }
                case "radar_quality_1": { isValid = true; break; }
                case "radar_quality_2": { isValid = true; break; }
                case "radar_quality_3": { isValid = true; break; }
                case "radar_quality_4": { isValid = true; break; }
                case "radar_quality_99": { isValid = true; break; }
                case "radar_world_level": { isValid = true; break; }
                case "radar_world_mission": { isValid = true; break; }
                case "radar_world_season": { isValid = true; break; }
                case "random_effect": { isValid = true; break; }
                case "rank": { isValid = true; break; }
                case "rank_show_oreder": { isValid = true; break; }
                case "recharge": { isValid = true; break; }
                case "recommend_config": { isValid = true; break; }
                case "recruit": { isValid = true; break; }
                case "recruit_rate_show": { isValid = true; break; }
                case "refugee": { isValid = true; break; }
                case "res_info": { isValid = true; break; }
                case "rescue_mission": { isValid = true; break; }
                case "rescue_people": { isValid = true; break; }
                case "resource_goto": { isValid = true; break; }
                case "resource_point": { isValid = true; break; }
                case "resource2": { isValid = true; break; }
                case "resources_type": { isValid = true; break; }
                case "return_activity": { isValid = true; break; }
                case "return_activity_star": { isValid = true; break; }
                case "reward_bassline": { isValid = true; break; }
                case "rights_effect": { isValid = true; break; }
                case "rights_effect_level": { isValid = true; break; }
                case "road": { isValid = true; break; }
                case "role": { isValid = true; break; }
                case "role_exp": { isValid = true; break; }
                case "ruins_adventure_monster": { isValid = true; break; }
                case "rush_unlock": { isValid = true; break; }
                case "santa_activity_guide": { isValid = true; break; }
                case "science_layer": { isValid = true; break; }
                case "Science_Point": { isValid = true; break; }
                case "Science_Point_2": { isValid = true; break; }
                case "Science_Point_Level": { isValid = true; break; }
                case "Science_Point_Level_2": { isValid = true; break; }
                case "science_recommend2": { isValid = true; break; }
                case "Science_Score_Level": { isValid = true; break; }
                case "Science_Score_Level_2": { isValid = true; break; }
                case "Science_Score_Stats": { isValid = true; break; }
                case "Science_Score_Stats_2": { isValid = true; break; }
                case "Science_Score_Type": { isValid = true; break; }
                case "Science_Score_Type_2": { isValid = true; break; }
                case "science2": { isValid = true; break; }
                case "scienceType": { isValid = true; break; }
                case "score": { isValid = true; break; }
                case "scoreFix": { isValid = true; break; }
                case "search": { isValid = true; break; }
                case "season": { isValid = true; break; }
                case "search_season": { isValid = true; break; }
                case "search_season_build": { isValid = true; break; }
                case "search_season_bx": { isValid = true; break; }
                case "search_season_nc": { isValid = true; break; }
                case "serverpos": { isValid = true; break; }
                case "siegeCrest_siegeArmsAttr": { isValid = true; break; }
                case "siegeCrest_siegeAttrList": { isValid = true; break; }
                case "siegeCrest_siegeCamp": { isValid = true; break; }
                case "siegeCrest_siegeCard": { isValid = true; break; }
                case "siegeCrest_siegeCrest": { isValid = true; break; }
                case "siegeCrest_siegeLevel": { isValid = true; break; }
                case "siegeCrest_siegeSpeAttr": { isValid = true; break; }
                case "siegeCrest_siegeTower": { isValid = true; break; }
                case "siegeFunction_siegeCamp": { isValid = true; break; }
                case "siegeFunction_siegeConfig": { isValid = true; break; }
                case "siegeFunction_siegeDialog": { isValid = true; break; }
                case "siegeFunction_siegeFunction": { isValid = true; break; }
                case "siegeFunction_siegeNPC": { isValid = true; break; }
                case "siegeFunction_siegePosition": { isValid = true; break; }
                case "siegeFunction_siegeQuest": { isValid = true; break; }
                case "siegeFunction_siegeScoreAction": { isValid = true; break; }
                case "siegeFunction_siegeTrigger": { isValid = true; break; }
                case "sk": { isValid = true; break; }
                case "skill": { isValid = true; break; }
                case "skill2": { isValid = true; break; }
                case "skills_TD": { isValid = true; break; }
                case "skin": { isValid = true; break; }
                case "skin_information": { isValid = true; break; }
                case "soldier_effect": { isValid = true; break; }
                case "some_settings": { isValid = true; break; }
                case "special_gift": { isValid = true; break; }
                case "speedup_config": { isValid = true; break; }
                case "stage_map": { isValid = true; break; }
                case "stage_map1": { isValid = true; break; }
                case "stage_map1001": { isValid = true; break; }
                case "stage_map1002": { isValid = true; break; }
                case "stage_map1003": { isValid = true; break; }
                case "stage_map1004": { isValid = true; break; }
                case "stage_map1005": { isValid = true; break; }
                case "stage_map1006": { isValid = true; break; }
                case "stage_map1007": { isValid = true; break; }
                case "stage_map1008": { isValid = true; break; }
                case "stage_map1009": { isValid = true; break; }
                case "stage_map1010": { isValid = true; break; }
                case "stage_map1011": { isValid = true; break; }
                case "stage_map1012": { isValid = true; break; }
                case "stage_map1013": { isValid = true; break; }
                case "stage_map1014": { isValid = true; break; }
                case "stage_map1015": { isValid = true; break; }
                case "stage_map1021": { isValid = true; break; }
                case "stage_map1031": { isValid = true; break; }
                case "stage_map2": { isValid = true; break; }
                case "stage_map3": { isValid = true; break; }
                case "stage_map4": { isValid = true; break; }
                case "stage_map5": { isValid = true; break; }
                case "stage_map6": { isValid = true; break; }
                case "stage_map7": { isValid = true; break; }
                case "stage_map8": { isValid = true; break; }
                case "stage_map900001": { isValid = true; break; }
                case "stage_map900002": { isValid = true; break; }
                case "stage_map900003": { isValid = true; break; }
                case "stage_map900006": { isValid = true; break; }
                case "stage_map900007": { isValid = true; break; }
                case "stationed_time": { isValid = true; break; }
                case "status": { isValid = true; break; }
                case "status_TD": { isValid = true; break; }
                case "system_notice": { isValid = true; break; }
                case "talentHome": { isValid = true; break; }
                case "TalentShow": { isValid = true; break; }
                case "talkTips": { isValid = true; break; }
                case "td_action": { isValid = true; break; }
                case "td_animation": { isValid = true; break; }
                case "td_builder": { isValid = true; break; }
                case "td_building": { isValid = true; break; }
                case "td_building_config": { isValid = true; break; }
                case "td_building_level": { isValid = true; break; }
                case "td_bullet": { isValid = true; break; }
                case "td_hero": { isValid = true; break; }
                case "td_hero_lvup": { isValid = true; break; }
                case "td_level_config": { isValid = true; break; }
                case "td_map": { isValid = true; break; }
                case "td_position": { isValid = true; break; }
                case "td_reward": { isValid = true; break; }
                case "td_skill": { isValid = true; break; }
                case "td_skill_gold": { isValid = true; break; }
                case "td_unlock": { isValid = true; break; }
                case "td_wave": { isValid = true; break; }
                case "td_zombie": { isValid = true; break; }
                case "td2_buildingconfig": { isValid = true; break; }
                case "td2_hero_mod": { isValid = true; break; }
                case "td2_level_config": { isValid = true; break; }
                case "td2_wave": { isValid = true; break; }
                case "td2_zombie": { isValid = true; break; }
                case "territory": { isValid = true; break; }
                case "territory_effect": { isValid = true; break; }
                case "thrash_talk": { isValid = true; break; }
                case "throne_incident_bulletin": { isValid = true; break; }
                case "throne_incident_event": { isValid = true; break; }
                case "title": { isValid = true; break; }
                case "top_function_icon": { isValid = true; break; }
                case "tower": { isValid = true; break; }
                case "towerskill": { isValid = true; break; }
                case "train": { isValid = true; break; }
                case "transform": { isValid = true; break; }
                case "truck": { isValid = true; break; }
                case "trucktype": { isValid = true; break; }
                case "unlock_attribute": { isValid = true; break; }
                case "unlock_function": { isValid = true; break; }
                case "unlock_information": { isValid = true; break; }
                case "unlock_information_base": { isValid = true; break; }
                case "unlock_parcel": { isValid = true; break; }
                case "unlock_parcel_3": { isValid = true; break; }
                case "unlock_parcel_3_u3d": { isValid = true; break; }
                case "unlock_parcel_4": { isValid = true; break; }
                case "unlock_parcel_4_u3d": { isValid = true; break; }
                case "unlock_parcel_5": { isValid = true; break; }
                case "unlock_parcel_5_u3d": { isValid = true; break; }
                case "unlock_parcel_b_u3d": { isValid = true; break; }
                case "unlock_parcel_roenewguide": { isValid = true; break; }
                case "unlock_picture": { isValid = true; break; }
                case "unlock_population": { isValid = true; break; }
                case "upgrade_boss_reward": { isValid = true; break; }
                case "upgradeNotice": { isValid = true; break; }
                case "vip": { isValid = true; break; }
                case "vip_store_unlock": { isValid = true; break; }
                case "vipdetails": { isValid = true; break; }
                case "warning": { isValid = true; break; }
                case "wonder": { isValid = true; break; }
                case "wonders": { isValid = true; break; }
                case "world_config": { isValid = true; break; }
                case "world_decorate": { isValid = true; break; }
                case "World_events_function_unlock": { isValid = true; break; }
                case "World_events_World_events": { isValid = true; break; }
                case "world_map_info": { isValid = true; break; }
                case "world_season": { isValid = true; break; }
                case "worldcastle": { isValid = true; break; }
                case "worldmine": { isValid = true; break; }
                case "worldtrend": { isValid = true; break; }
                case "xml_info": { isValid = true; break; }
                case "zombie_event": { isValid = true; break; }
                case "zones_limit": { isValid = true; break; }
                case "zones_limit_show": { isValid = true; break; }

                default: { isValid = ConfigManager.Instance.IsValidTable(tableName); break; }




            }

            return isValid;
        }
        
        #endregion Framework Method
    }
}