// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace LF.Table
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DRatlas : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DRatlas GetRootAsDRatlas(ByteBuffer _bb) { return GetRootAsDRatlas(_bb, new DRatlas()); }
  public static DRatlas GetRootAsDRatlas(ByteBuffer _bb, DRatlas obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DRatlas __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string BundleName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBundleNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetBundleNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetBundleNameArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<LF.Table.DRatlas> CreateDRatlas(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset BundleNameOffset = default(StringOffset)) {
    builder.StartTable(2);
    DRatlas.AddBundleName(builder, BundleNameOffset);
    DRatlas.AddId(builder, idOffset);
    return DRatlas.EndDRatlas(builder);
  }

  public static void StartDRatlas(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddBundleName(FlatBufferBuilder builder, StringOffset BundleNameOffset) { builder.AddOffset(1, BundleNameOffset.Value, 0); }
  public static Offset<LF.Table.DRatlas> EndDRatlas(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.DRatlas>(o);
  }
};

public struct Table_atlas : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Table_atlas GetRootAsTable_atlas(ByteBuffer _bb) { return GetRootAsTable_atlas(_bb, new Table_atlas()); }
  public static Table_atlas GetRootAsTable_atlas(ByteBuffer _bb, Table_atlas obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Table_atlas __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public LF.Table.DRatlas? Data(int j) { int o = __p.__offset(4); return o != 0 ? (LF.Table.DRatlas?)(new LF.Table.DRatlas()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<LF.Table.Table_atlas> CreateTable_atlas(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Table_atlas.AddData(builder, dataOffset);
    return Table_atlas.EndTable_atlas(builder);
  }

  public static void StartTable_atlas(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<LF.Table.DRatlas>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<LF.Table.DRatlas>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LF.Table.Table_atlas> EndTable_atlas(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LF.Table.Table_atlas>(o);
  }
  public static void FinishTable_atlasBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_atlas> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTable_atlasBuffer(FlatBufferBuilder builder, Offset<LF.Table.Table_atlas> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
