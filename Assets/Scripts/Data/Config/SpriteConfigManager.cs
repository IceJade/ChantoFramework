// <auto-generated>
//  automatically generated by table tool, do not modify
// </auto-generated>
using Framework;
using System.IO;
using UnityEngine;
using XLua;

#if UNITY_EDITOR
using UnityEditor;
#endif

namespace Chanto
{
    public enum E_SpriteLoadType
    {
        None = -1,
        Bundle,
        Atlas,
    }

	public class SpriteConfigManager : Singleton<SpriteConfigManager>
    {
        private AtlasTable _atlasTable = new AtlasTable();
        private SpritesTable _spritesTable = new SpritesTable();
        private Sprites_extendTable _spritesExtendTable = new Sprites_extendTable();

        private Hot_atlasTable _hot_atlasTable = new Hot_atlasTable();
        private Hot_spritesTable _hot_spritesTable = new Hot_spritesTable();
        private Hot_sprites_extendTable _hot_spritesExtendTable = new Hot_sprites_extendTable();

        /// <summary>
        /// 获得图片的加载类型
        /// </summary>
        /// <param name="spriteName"></param>
        /// <returns></returns>
        public E_SpriteLoadType GetLoadType(string spriteName)
        {
            var spritesTable = this.GetSpritesTable(spriteName);
            if (null != spritesTable)
            {
                var datarow = spritesTable.GetDataRow(spriteName);
                if (null != datarow)
                    return (E_SpriteLoadType)datarow.LoadType;
            }

            return E_SpriteLoadType.None;
        }

        /// <summary>
        /// 获得AssetBundle
        /// </summary>
        /// <param name="spriteName"></param>
        /// <returns></returns>
        public string GetBunldeName(string spriteName)
        {
            string bundleName = "";

            var spritesTable = this.GetSpritesTable(spriteName);
            if (null != spritesTable)
            {
                var datarow = spritesTable.GetDataRow(spriteName);
                if (null != datarow)
                {
                    if(datarow.LoadType == 1)
                    {
                        var atlasTable = this.GetAtlasTable();
                        var atlasDataRow = atlasTable.GetDataRow(datarow.AtlasOrBundleName);
                        if (null != atlasDataRow)
                            bundleName = atlasDataRow.BundleName;
                    }
                    else
                    {
                        bundleName = datarow.AtlasOrBundleName;
                    }
                }
            }

            return bundleName;
        }

        /// <summary>
        /// 获得图片所在的图集名称
        /// </summary>
        /// <param name="spriteName"></param>
        /// <returns></returns>
        public string GetAtlasName(string spriteName)
        {
            string atlasName = "";

            var spritesTable = this.GetSpritesTable(spriteName);
            if (null != spritesTable)
            {
                var datarow = spritesTable.GetDataRow(spriteName);
                if (null != datarow)
                {
                    if (datarow.LoadType == 1)
                        atlasName = datarow.AtlasOrBundleName;
                }
            }

            return atlasName;
        }

        /// <summary>
        /// 检查图片配置的正确性
        /// </summary>
        /// <param name="spriteName"></param>
        /// <returns></returns>
        public int CheckSpriteValid(string spriteName, string defaultSpriteName = "")
        {
            var loadType = this.GetLoadType(spriteName);
            if (loadType == E_SpriteLoadType.None)
            {
                // 如果找不到图片,那么使用默认图片
                if (!string.IsNullOrEmpty(defaultSpriteName))
                {
                    string assetName = Path.GetFileNameWithoutExtension(defaultSpriteName);
                    loadType = this.GetLoadType(assetName);
                    if (loadType == E_SpriteLoadType.None)
                    {
                        Log.ErrorFormat("找不到图片: {0} 和 {1} , 请检查是否导入...", spriteName, defaultSpriteName);
                        return 6;
                    }
                }
                else
                {
                    Log.ErrorFormat("找不到图片:{0}, 请检查...", spriteName);
                    return 6;
                }
            }

            return 0;
        }

        public bool HasSprites(string spriteName)
        {
            return null != GetSpritesTable(spriteName);
        }

        private AtlasTable GetAtlasTable()
        {
            if (null == _atlasTable)
                _atlasTable = new AtlasTable();

            return _atlasTable;
        }

        private SpritesTable GetSpritesTable(string spriteName)
        {
            spriteName = spriteName.Replace(".png", "");
            if (null != this._spritesTable && this._spritesTable.HasSprite(spriteName))
                return this._spritesTable;

            if (null != this._spritesExtendTable && this._spritesExtendTable.HasSprite(spriteName))
                return this._spritesExtendTable;

            if (null != this._hot_spritesTable && this._hot_spritesTable.HasSprite(spriteName))
                return this._hot_spritesTable;

            if (null != this._hot_spritesExtendTable && this._hot_spritesExtendTable.HasSprite(spriteName))
                return this._hot_spritesExtendTable;

            Log.Warning($"图片{spriteName}不存在或者没有配置！请检查！");

            return null;
        }

        private Hot_atlasTable GetHotAtlasTable()
        {
            if (null == _hot_atlasTable)
                _hot_atlasTable = new Hot_atlasTable();

            return _hot_atlasTable;
        }

        private Hot_spritesTable GetHotSpritesTable()
        {
            if (null == _hot_spritesTable)
                _hot_spritesTable = new Hot_spritesTable();

            return _hot_spritesTable;
        }

        #region Unity Editor

#if UNITY_EDITOR

        private Sprites_pathTable[] _sprites_pathTable = null;
        private Sprites_path_with_folderTable[] _sprites_path_with_folderTable = null;
        [BlackList]
        public Sprite GetSprite(string spriteName)
        {
            var spriteFile = this.GetSpriteFile(spriteName);
            if(spriteFile.IsNullOrEmpty())
            {
                Log.Error($"未找到图片:{spriteName}");
                return null;
            }

            var sprite = AssetDatabase.LoadAssetAtPath<Sprite>(spriteFile);
            if(null == sprite)
            {
                Log.Error($"未加载到图片,请确认路径是否正确? {spriteFile}");
                return null;
            }

            return sprite;
        }

        private string GetSpriteFile(string spriteName)
        {
            string spriteFile = "";

            if (spriteName.IsNullOrEmpty())
                return spriteFile;

            if(spriteName.Contains("/") || spriteName.Contains("\\"))
            {
                var tmpSpriteName = spriteName.Replace("\\", "/");
                var spritesTable = this.GetSprites_path_with_folderTable(tmpSpriteName);
                if (null != spritesTable)
                {
                    var datarow = spritesTable.GetDataRow(spriteName);
                    if (null != datarow)
                    {
                        spriteFile = datarow.AtlasOrBundleName;
                    }
                }
            }
            else
            {
                var spritesTable = this.GetSprites_pathTable(spriteName);
                if (null != spritesTable)
                {
                    var datarow = spritesTable.GetDataRow(spriteName);
                    if (null != datarow)
                    {
                        spriteFile = datarow.AtlasOrBundleName;
                    }
                }
            }

            return spriteFile;
        }

        private Sprites_pathTable GetSprites_pathTable(string spriteName)
        {
            var tables = this.GetSprites_pathTables();
            if (null == tables)
                return null;

            for(int i = 0; i < tables.Length; i++)
            {
                if (tables[i].HasSprite(spriteName))
                    return tables[i];
            }

            return null;
        }

        private Sprites_pathTable[] GetSprites_pathTables()
        {
            if (null == _sprites_pathTable)
            {
                _sprites_pathTable = new Sprites_pathTable[3];
                for (int i = 0; i < 3; i++)
                {
                    _sprites_pathTable[i] = new Sprites_pathTable(i + 1);
                }
            }

            return _sprites_pathTable;
        }

        private Sprites_path_with_folderTable GetSprites_path_with_folderTable(string spriteName)
        {
            var tables = this.GetSprites_path_with_folderTables();
            if (null == tables)
                return null;

            for (int i = 0; i < tables.Length; i++)
            {
                if (tables[i].HasSprite(spriteName))
                    return tables[i];
            }

            return null;
        }

        private Sprites_path_with_folderTable[] GetSprites_path_with_folderTables()
        {
            if (null == _sprites_path_with_folderTable)
            {
                _sprites_path_with_folderTable = new Sprites_path_with_folderTable[4];
                for (int i = 0; i < 4; i++)
                {
                    _sprites_path_with_folderTable[i] = new Sprites_path_with_folderTable(i + 1);
                }
            }

            return _sprites_path_with_folderTable;
        }

#endif

        #endregion
    }
}